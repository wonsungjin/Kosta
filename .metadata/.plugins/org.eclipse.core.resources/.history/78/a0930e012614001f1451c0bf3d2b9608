package com.kosta.sample.board;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.sql.DataSource;

import com.kosta.sample.json.EmpVO;

import oracle.jdbc.pool.OracleConnectionPoolDataSource;


public class Board {
	static final String DB_URL = "jdbc:oracle:thin:@127.0.0.1:1521:XE";
	static final String DB_ID = "it";
	static final String DB_PW = "0000";

	public ArrayList<EmpVO> boardSelect() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<EmpVO> list = null;
		String sql = "select * from emp";
		try {
			conn = oracleConn();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			list = new ArrayList();
			while (rs.next() == true) {
				EmpVO emp = new EmpVO();
				emp.setEname(rs.getString("ename"));
				emp.setEmpno(rs.getInt("empno"));
				list.add(emp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			oracleClose(conn, pstmt, rs);
		}
		return list;
	}

	public int boardDelete(int empno) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		int delCount = 0;
		try {
			conn = oracleConn().getConnection();
			// String 은 불변이기 때문에 계속 4바이트씩 메모리차지 하게됨
			// String sql = "delete from emp where empno="+empno;
			// 프리페어 스테이트먼트의 바인딩
			String sql = "delete from emp where empno=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, empno);// 런타임시 동적 바인딩
									// 1번째 물음표에 , 넣을값)
			delCount = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			oracleClose(conn, pstmt);
		}
		return delCount;
	}

	
	public DataSource oracleConn() {
		
		OracleConnectionPoolDataSource obj = null;
		try {
			obj = new OracleConnectionPoolDataSource();
			obj.setURL(DB_URL);
			obj.setUser(DB_ID);
			obj.setPassword(DB_PW);
			 getPooledConnection();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return obj;
	}

	private void getPooledConnection() {
		
	}

	public void oracleClose(Connection conn, PreparedStatement pstmt, ResultSet rs) {
		try {
			rs.close();
			pstmt.close();
			conn.close();
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public void oracleClose(Connection conn, PreparedStatement pstmt) {
		try {
			pstmt.close();
			conn.close();
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}
}
