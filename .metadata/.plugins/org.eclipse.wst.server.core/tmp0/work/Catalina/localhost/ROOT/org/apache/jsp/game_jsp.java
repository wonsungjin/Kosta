/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-05-29 06:18:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class game_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Pacman Game</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        /* 게임 스타일링 */\r\n");
      out.write("        #gameCanvas {\r\n");
      out.write("            border: 1px solid black;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <canvas id=\"gameCanvas\" width=\"400\" height=\"400\"></canvas>\r\n");
      out.write("    <script>\r\n");
      out.write("        // 팩맨 게임 로직 작성\r\n");
      out.write("        const canvas = document.getElementById('gameCanvas');\r\n");
      out.write("        const ctx = canvas.getContext('2d');\r\n");
      out.write("\r\n");
      out.write("        let pacman = {\r\n");
      out.write("            x: 50,\r\n");
      out.write("            y: 50,\r\n");
      out.write("            speed: 5,\r\n");
      out.write("            dx: 0, // x축 방향 속도\r\n");
      out.write("            dy: 0  // y축 방향 속도\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        function drawPacman() {\r\n");
      out.write("            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n");
      out.write("            ctx.fillStyle = 'yellow';\r\n");
      out.write("            ctx.beginPath();\r\n");
      out.write("            ctx.arc(pacman.x, pacman.y, 15, 0.2 * Math.PI, 1.8 * Math.PI);\r\n");
      out.write("            ctx.lineTo(pacman.x, pacman.y);\r\n");
      out.write("            ctx.closePath();\r\n");
      out.write("            ctx.fill();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function update() {\r\n");
      out.write("            drawPacman();\r\n");
      out.write("            pacman.x += pacman.dx;\r\n");
      out.write("            pacman.y += pacman.dy;\r\n");
      out.write("            // 팩맨이 캔버스 경계를 벗어나지 않도록 제어\r\n");
      out.write("            if (pacman.x < 15) {\r\n");
      out.write("                pacman.x = 15;\r\n");
      out.write("            }\r\n");
      out.write("            if (pacman.x > canvas.width - 15) {\r\n");
      out.write("                pacman.x = canvas.width - 15;\r\n");
      out.write("            }\r\n");
      out.write("            if (pacman.y < 15) {\r\n");
      out.write("                pacman.y = 15;\r\n");
      out.write("            }\r\n");
      out.write("            if (pacman.y > canvas.height - 15) {\r\n");
      out.write("                pacman.y = canvas.height - 15;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function movePacman(direction) {\r\n");
      out.write("            switch (direction) {\r\n");
      out.write("                case 'up':\r\n");
      out.write("                    pacman.dx = 0;\r\n");
      out.write("                    pacman.dy = -pacman.speed;\r\n");
      out.write("                    break;\r\n");
      out.write("                case 'down':\r\n");
      out.write("                    pacman.dx = 0;\r\n");
      out.write("                    pacman.dy = pacman.speed;\r\n");
      out.write("                    break;\r\n");
      out.write("                case 'left':\r\n");
      out.write("                    pacman.dx = -pacman.speed;\r\n");
      out.write("                    pacman.dy = 0;\r\n");
      out.write("                    break;\r\n");
      out.write("                case 'right':\r\n");
      out.write("                    pacman.dx = pacman.speed;\r\n");
      out.write("                    pacman.dy = 0;\r\n");
      out.write("                    break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        document.addEventListener('keydown', function(event) {\r\n");
      out.write("            switch (event.key) {\r\n");
      out.write("                case 'ArrowUp':\r\n");
      out.write("                case 'ArrowDown':\r\n");
      out.write("                case 'ArrowLeft':\r\n");
      out.write("                case 'ArrowRight':\r\n");
      out.write("                    movePacman(event.key.replace('Arrow', '').toLowerCase());\r\n");
      out.write("                    break;\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        setInterval(update, 1000 / 60);\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
