/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-05-29 05:46:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import com.kosta.sample.json.EmpVO;

public final class lec_005fchart_005frest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.kosta.sample.json.EmpVO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- \r\n");
      out.write("C3.js :  (easy) to generate D3-based charts  \r\n");
      out.write("      :  (D3-based) reusable (JavaScript chart library). \r\n");
      out.write("D3.js : open-source JavaScript library for visualizing.\r\n");
      out.write("\r\n");
      out.write("https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js\r\n");
      out.write("https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.js\r\n");
      out.write("\r\n");
      out.write("https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.css\r\n");
      out.write("https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.css\r\n");
      out.write(" -->\r\n");
      out.write(" \r\n");
      out.write("<!-- Load c3.css -->\r\n");
      out.write("<link href=\"https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<!-- Load d3.js and c3.js   https://cdnjs.cloudflare.com/ajax/libs/d3/5.15.0/d3.js -->\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.15.0/d3.js\" charset=\"utf-8\"></script>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.js\"></script>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("여기에 차트<br>\r\n");
      out.write("<div id=\"my_chart_div\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<input type=\"button\" id=\"restBtn\" value=\"REST로 가져오기\">\r\n");
      out.write("		\r\n");
      out.write("<script>\r\n");
      out.write("var chart = c3.generate({\r\n");
      out.write("    bindto: '#my_chart_div',\r\n");
      out.write("    data: {\r\n");
      out.write("      columns: [\r\n");
      out.write("        ['급여', 3000, 200, 100, 400, 150, 250]\r\n");
      out.write("        //,['data2', 50, 20, 10, 40, 15, 25]\r\n");
      out.write("      ]\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	$(function() {  \r\n");
      out.write("		//$(\"#restBtn\").click(  function(){\r\n");
      out.write("				$.ajax({ \r\n");
      out.write("					url : \"/EmpServlet\" ,\r\n");
      out.write("					method: \"post\" , \r\n");
      out.write("					//data:\r\n");
      out.write("					//contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n");
      out.write("					//---------- 서버로부터의 응답이 str으로 오는 경우\r\n");
      out.write("					/*success : function(resString) {\r\n");
      out.write("						console.log(\"성공\" + resString);\r\n");
      out.write("						var json_obj = JSON.parse(resString);\r\n");
      out.write("						//console.log(\"성공\" + json_obj[0][\"sal\"]);\r\n");
      out.write("						$.map( json_obj, function( MYval, MYidx ) {\r\n");
      out.write("							console.log(MYval[\"sal\"] + \",\" + MYval[\"ename\"] + \",\" + MYidx);\r\n");
      out.write("						});\r\n");
      out.write("					},*/\r\n");
      out.write("					dataType: \"json\" ,\r\n");
      out.write("					success : function(resObject) {\r\n");
      out.write("						console.log(\"성공\" + resObject);\r\n");
      out.write("						var sal_arr = ['급여']\r\n");
      out.write("						var ename_arr = ['급여']\r\n");
      out.write("						$.map( resObject, function( MYval, MYidx ) {\r\n");
      out.write("							sal_arr.push(MYval[\"sal\"]);\r\n");
      out.write("						});\r\n");
      out.write("						$.map( resObject, function( MYval, MYidx ) {\r\n");
      out.write("							ename_arr.push(MYval[\"ename\"]);\r\n");
      out.write("						});\r\n");
      out.write("						console.log(sal_arr);\r\n");
      out.write("						//차트 리로드\r\n");
      out.write("						chart.load({\r\n");
      out.write("							columns: [\r\n");
      out.write("						        sal_arr\r\n");
      out.write("						        \r\n");
      out.write("						      ]\r\n");
      out.write("						});\r\n");
      out.write("					},\r\n");
      out.write("					error   : function(res) {\r\n");
      out.write("						console.log(\"실패\");	\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("		//});\r\n");
      out.write("	});\r\n");
      out.write("</script>		\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
